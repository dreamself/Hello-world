public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int m = nums1.length;
       int n = nums2.length;
       int p = (m+n+1)/2;
       int q = (m+n+2)/2;
       return (findKth(nums1, 0, nums2, 0, p) + findKth(nums1, 0, nums2, 0, q))/2.0;
    }
    
    private  int findKth(int[] nums1, int start1, int[] nums2, int start2, int k){
        if (start1 >= nums1.length){
            return nums2[k-1];
        }       
        if (start2 >= nums2.length){
            return nums1[k-1];
        }       
        if (k == 1){
            return Math.min(nums1[start1], nums2[start2]);
        }
        int aMid = Integer.MAX_VALUE;
        int bMid = Integer.MAX_VALUE;
        if (start1 + k/2-1 < nums1.length) aMid = nums1[start1 + k/2-1];
        if (start2 + k/2-1 < nums2.length) bMid = nums2[start2 + k/2-1];
        if (aMid < bMid){
            return findKth(nums1, start1 + k/2, nums2, start2,  k/2);
        }
        else{
            return findKth(nums1, start1,  nums2, start2+ k/2,  k/2);
        }
    }
}
